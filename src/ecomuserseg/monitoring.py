import pandas as pd
import numpy as np
import pickle
from datetime import datetime
import os
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'settings'))

def recommend_update_strategy(drift_results, stability_results, quality_df=None):
    """
    Recommande une strat√©gie de mise √† jour bas√©e sur l'analyse de d√©rive et stabilit√©
    
    Parameters
    ----------
    drift_results : dict
        R√©sultats de l'analyse de d√©rive par sc√©nario
    stability_results : dict
        R√©sultats de l'analyse de stabilit√© par sc√©nario
    quality_df : pd.DataFrame, optional
        DataFrame avec l'√©volution de la qualit√©
    
    Returns
    -------
    dict
        Recommandations par sc√©nario
    """
    strategies = {}
    
    for scenario in drift_results.keys():
        n_drifts = sum([r['is_drift'] for r in drift_results[scenario].values()])
        total_vars = len(drift_results[scenario])
        drift_ratio = n_drifts / total_vars
        
        # Calcul de la d√©gradation silhouette
        if quality_df is not None:
            original_silhouette = quality_df[quality_df['Scenario'] == 'Original']['Silhouette_Combined'].iloc[0]
            current_silhouette = stability_results[scenario]['silhouette_combined']
            silhouette_degradation = original_silhouette - current_silhouette
        else:
            silhouette_degradation = 0.0  # Valeur par d√©faut si pas de donn√©es
        
        # Crit√®res adapt√©s aux donn√©es
        if silhouette_degradation < 0.01:  # D√©gradation n√©gligeable
            strategy = "‚úÖ MAINTENIR - Mod√®le stable"
            action = "Continuer le monitoring. Performance excellente."
            
        elif silhouette_degradation < 0.05:  # D√©gradation faible
            strategy = "‚ö†Ô∏è MONITORING RENFORC√â"
            action = "Surveillance accrue mais pas de mise √† jour n√©cessaire."
            
        elif silhouette_degradation < 0.1:  # D√©gradation mod√©r√©e
            strategy = "üîÑ MISE √Ä JOUR RECOMMAND√âE"
            action = "R√©entra√Ænement avec nouvelles donn√©es recommand√©."
            
        else:  # D√©gradation significative
            strategy = "üö® REFONTE N√âCESSAIRE"
            action = "Revoir compl√®tement la segmentation."
        
        strategies[scenario] = {
            'drift_ratio': drift_ratio,
            'silhouette_degradation': silhouette_degradation,
            'strategy': strategy,
            'action': action
        }
    
    return strategies

def create_monitoring_dashboard(alert_thresholds=None):
    """
    Cr√©e un tableau de bord de monitoring pour la production
    
    Parameters
    ----------
    alert_thresholds : dict, optional
        Seuils d'alerte personnalis√©s
    
    Returns
    -------
    tuple
        (monitoring_metrics, alert_thresholds)
    """
    # M√©triques cl√©s √† surveiller
    monitoring_metrics = {
        'Qualit√© du mod√®le': {
            'Silhouette Score': 'Coh√©sion interne des clusters (>0.2 recommand√©)',
            'Inertie': 'Compacit√© des clusters (√©volution relative)',
            'Taille des clusters': 'Distribution √©quilibr√©e (aucun cluster <5%)'
        },
        'D√©rive des donn√©es': {
            'Variables en d√©rive': 'Nombre de variables avec p-value <0.05',
            'Score de d√©rive KS': 'Moyenne des statistiques KS',
            'D√©rive g√©ographique': 'Changement dans la r√©partition des √©tats'
        },
        'Performance m√©tier': {
            'Nouveaux clients/mois': 'Volume d\'int√©gration des nouvelles donn√©es',
            'Stabilit√© des segments': 'Variation des tailles de clusters',
            'Utilisabilit√© marketing': 'Feedback des √©quipes utilisatrices'
        }
    }
    
    # Seuils d'alerte par d√©faut
    if alert_thresholds is None:
        alert_thresholds = {
            'Silhouette d√©gradation': 0.01,
            'Variables en d√©rive (%)': 80,         
            'Variation taille cluster (%)': 15,    
            'Score KS moyen': 0.3                  
        }
    
    return monitoring_metrics, alert_thresholds

def simulate_auto_update_pipeline(new_data, original_model, original_data, threshold_config=None):
    """
    Simule un pipeline de mise √† jour automatique
    
    Parameters
    ----------
    new_data : pd.DataFrame
        Nouvelles donn√©es
    original_model : Pipeline
        Mod√®le original
    original_data : pd.DataFrame
        Donn√©es originales
    threshold_config : dict, optional
        Configuration des seuils
    
    Returns
    -------
    str
        D√©cision du pipeline
    """
    from .simulation import detect_data_drift, evaluate_cluster_stability
    
    if threshold_config is None:
        threshold_config = {'drift_threshold': 0.3, 'silhouette_threshold': 0.05}
    
    print("PIPELINE DE MISE √Ä JOUR AUTOMATIQUE")
    print("=" * 40)
    
    # √âtape 1: D√©tection de d√©rive
    print("1. D√©tection de d√©rive...")
    drift_detected = detect_data_drift(original_data, new_data, significance_level=0.05)
    n_drifts = sum([r['is_drift'] for r in drift_detected.values()])
    drift_ratio = n_drifts / len(drift_detected)
    
    # √âtape 2: √âvaluation de la qualit√©
    print("2. √âvaluation de la qualit√©...")
    stability_result = evaluate_cluster_stability(original_data, new_data, original_model, "Auto-update")
    
    # Calcul de la d√©gradation r√©elle (simulation)
    original_silhouette = 0.229  # Valeur de r√©f√©rence du projet
    silhouette_degradation = original_silhouette - stability_result['silhouette_combined']
    
    # √âtape 3: D√©cision bas√©e sur l'impact r√©el
    print("3. Prise de d√©cision...")
    
    if silhouette_degradation > threshold_config.get('silhouette_threshold', 0.05):
        decision = "R√âENTRA√éNEMENT"
        print(f"   D√©cision: {decision} (d√©gradation {silhouette_degradation:.3f} > seuil)")
    elif silhouette_degradation > 0.01:
        decision = "MONITORING RENFORC√â"
        print(f"   D√©cision: {decision} (d√©gradation {silhouette_degradation:.3f} mod√©r√©e)")
    else:
        decision = "MAINTIEN"
        print(f"   D√©cision: {decision} (d√©gradation n√©gligeable: {silhouette_degradation:.3f})")
        print(f"   Note: {drift_ratio:.1%} d√©rive d√©tect√©e mais sans impact op√©rationnel")
    
    return decision

def create_production_config(monitoring_metrics, alert_thresholds, recommendations):
    """
    Cr√©e la configuration compl√®te pour la production
    
    Parameters
    ----------
    monitoring_metrics : dict
        M√©triques de monitoring
    alert_thresholds : dict
        Seuils d'alerte
    recommendations : dict
        Recommandations par sc√©nario
    
    Returns
    -------
    dict
        Configuration compl√®te
    """
    try:
        from params import CLUSTERING_PARAMS
        random_state = CLUSTERING_PARAMS["RANDOM_STATE"]
    except ImportError:
        random_state = 42
    
    production_config = {
        'monitoring_metrics': monitoring_metrics,
        'alert_thresholds': alert_thresholds,
        'update_strategies': recommendations,
        'drift_detection_params': {
            'significance_level': 0.05,
            'test_method': 'kolmogorov_smirnov',
            'min_sample_size': 1000
        },
        'model_update_triggers': {
            'high_drift_threshold': 0.3,
            'silhouette_degradation_threshold': 0.1,
            'cluster_size_variation_threshold': 0.15
        },
        'retraining_schedule': {
            'frequency': 'monthly',
            'min_new_data_volume': 2000,
            'validation_method': 'silhouette_score'
        },
        'random_state': random_state
    }
    
    return production_config

def save_simulation_results(production_config, simulation_report, output_dir='../output'):
    """
    Sauvegarde les r√©sultats de simulation
    
    Parameters
    ----------
    production_config : dict
        Configuration de production
    simulation_report : dict
        Rapport de simulation
    output_dir : str
        R√©pertoire de sortie
    """
    # Cr√©er le r√©pertoire s'il n'existe pas
    os.makedirs(output_dir, exist_ok=True)
    
    # Sauvegarde
    with open(f'{output_dir}/production_monitoring_config.pkl', 'wb') as f:
        pickle.dump(production_config, f)
    
    with open(f'{output_dir}/simulation_report.pkl', 'wb') as f:
        pickle.dump(simulation_report, f)
    
    print("Configuration et rapport sauvegard√©s avec succ√®s!")
    print(f"- Configuration de monitoring: production_monitoring_config.pkl")
    print(f"- Rapport de simulation: simulation_report.pkl")

def analyze_quality_evolution(data_initial, stability_results, scenarios):
    """
    Analyse l'√©volution de la qualit√© du clustering
    
    Parameters
    ----------
    data_initial : pd.DataFrame
        Donn√©es initiales
    stability_results : dict
        R√©sultats de stabilit√© par sc√©nario
    scenarios : dict
        Sc√©narios de donn√©es
    
    Returns
    -------
    pd.DataFrame
        DataFrame avec l'√©volution de la qualit√©
    """
    # Silhouette score original (simulation)
    original_silhouette = 0.229  # Valeur de r√©f√©rence du projet
    
    # Compilation des r√©sultats
    results_df = pd.DataFrame({
        'Scenario': ['Original'] + list(scenarios.keys()),
        'Silhouette_New': [original_silhouette] + [stability_results[s]['silhouette_new'] for s in scenarios.keys()],
        'Silhouette_Combined': [original_silhouette] + [stability_results[s]['silhouette_combined'] for s in scenarios.keys()]
    })
    
    return results_df
